// Code generated by "esc -o static.go --pkg rest --prefix=../../../web/ ../../../web/"; DO NOT EDIT.

package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/favicon.ico": {
		name:    "favicon.ico",
		local:   "../../../web/favicon.ico",
		size:    67646,
		modtime: 1588875229,
		compressed: `
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
dvweKJT/DwAA//9hm8ucPggBAA==
`,
	},

	"/": {
		name:  "/",
		local: `../../../web/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"../../../web/": {
		_escData["/favicon.ico"],
	},
}
